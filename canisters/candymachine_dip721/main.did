type Metadata = record {
    "custodians": vec principal;
    "logo": text;
    "name": text;
    "symbol": text;
};

type Stats = record {
    "total_transactions": nat;
    "total_supply": nat;
    "cycles": nat;
    "total_unique_holders": nat;
};

type StringProperty = record { text; GenericValue };

type CreateCanisterArgs = record {
    "settings": opt CanisterSettings;
};

type UpdateSettingsArgs = record {
    "canister_id": principal;
    "settings": CanisterSettings;
};

type InstallCodeArgs = record {
    "mode": InstallCodeMode;
    "canister_id": principal;
    "wasm_module": vec nat8;
    "arg": vec nat8;
};

type UninstallCodeArgs = record {
    "canister_id": principal;
};

type StartCanisterArgs = record {
    "canister_id": principal;
};

type StopCanisterArgs = record {
    "canister_id": principal;
};

type CanisterStatusArgs = record {
    "canister_id": principal;
};

type DeleteCanisterArgs = record {
    "canister_id": principal;
};

type DepositCyclesArgs = record {
    "canister_id": principal;
};

type ProvisionalCreateCanisterWithCyclesArgs = record {
    "amount": opt nat;
    "settings": opt CanisterSettings;
};

type ProvisionalTopUpCanisterArgs = record {
    "canister_id": principal;
    "amount": nat;
};

type CreateCanisterResult = record {
    "canister_id": principal;
};

type CanisterStatusResult = record {
    "status": CanisterStatus;
    "settings": DefiniteCanisterSettings;
    "module_hash": opt vec nat8;
    "memory_size": nat;
    "cycles": nat;
};

type ProvisionalCreateCanisterWithCyclesResult = record {
    "canister_id": principal;
};

type Ledger = record {
    "tokensEntries": vec TokenIdToMetadata;
    "ownersEntries": vec TokenIdPrincipal;
    "operatorsEntries": vec TokenIdPrincipal;
    "txRecordsEntries": vec TxEvent;
};

type CanisterSettings = record {
    "controllers": opt vec principal;
    "compute_allocation": opt nat;
    "memory_allocation": opt nat;
    "freezing_threshold": opt nat;
};

type DefiniteCanisterSettings = record {
    "controllers": vec principal;
    "compute_allocation": nat;
    "memory_allocation": nat;
    "freezing_threshold": nat;
};

type TokenIdToMetadata = record {
    "tokenId": nat;
    "tokenMetadata": TokenMetadata;
};

type TokenMetadata = record {
    "transferred_at": opt nat64;
    "transferred_by": opt principal;
    "owner": opt principal;
    "operator": opt principal;
    "properties": vec StringProperty;
    "is_burned": bool;
    "token_identifier": nat;
    "burned_at": opt nat64;
    "burned_by": opt principal;
    "approved_at": opt nat64;
    "approved_by": opt principal;
    "minted_at": nat64;
    "minted_by": principal;
};

type TokenIdPrincipal = record {
    "principal": principal;
    "tokenIds": vec nat;
};

type TxEvent = record {
    "time": nat;
    "caller": principal;
    "operation": text;
    "details": vec TxDetails;
};

type NatResponseDto = variant { "Ok": opt nat; "Err": opt text };

type PrincipalResponseDto = variant { "Ok": opt principal; "Err": opt text };

type NatArrResponseDto = variant { "Ok": opt vec nat; "Err": opt text };

type TokenMetadataArrResponseDto = variant { "Ok": opt vec TokenMetadata; "Err": opt text };

type TokenMetadataResponseDto = variant { "Ok": opt TokenMetadata; "Err": opt text };

type BoolResponseDto = variant { "Ok": opt bool; "Err": opt text };

type TxEventResponseDto = variant { "Ok": opt TxEvent; "Err": opt text };

type TxDetails = variant { "operator": opt principal; "token_identifier": opt nat; "is_approved": opt bool; "owner": opt principal; "to": opt principal };

type InstallCodeMode = variant { "install": null; "reinstall": null; "upgrade": null };

type CanisterStatus = variant { "running": null; "stopping": null; "stopped": null };

type GenericValue = variant { "Nat64Content": nat64; "Nat32Content": nat32; "BoolContent": bool; "Nat8Content": nat8; "Int64Content": int64; "IntContent": int; "NatContent": nat; "Nat16Content": nat16; "Int32Content": int32; "Int8Content": int8; "FloatContent": float64; "Int16Content": int16; "BlobContent": vec nat8; "Principal": principal; "TextContent": text };

service: () -> {
    "metadata": () -> (Metadata) query;
    "name": () -> (text) query;
    "symbol": () -> (text) query;
    "logo": () -> (text) query;
    "custodians": () -> (vec principal) query;
    "totalTransactions": () -> (nat) query;
    "totalSupply": () -> (nat) query;
    "totalUniqueHolders": () -> (opt nat) query;
    "supportedInterfaces": () -> (vec text) query;
    "balanceOf": (principal) -> (NatResponseDto) query;
    "ownerOf": (nat) -> (PrincipalResponseDto) query;
    "ownerTokenIdentifiers": (principal) -> (NatArrResponseDto) query;
    "ownerTokenMetadata": (principal) -> (TokenMetadataArrResponseDto) query;
    "operatorOf": (nat) -> (PrincipalResponseDto) query;
    "operatorTokenIdentifiers": (principal) -> (NatArrResponseDto) query;
    "operatorTokenMetadata": (principal) -> (TokenMetadataArrResponseDto) query;
    "tokenMetadata": (nat) -> (TokenMetadataResponseDto) query;
    "isApprovedForAll": (principal, principal) -> (BoolResponseDto) query;
    "transaction": (nat) -> (TxEventResponseDto) query;
    "setName": (text) -> ();
    "setLogo": (text) -> ();
    "setSymbol": (text) -> ();
    "setCustodians": (vec principal) -> ();
    "cycles": () -> (opt nat);
    "stats": () -> (Stats);
    "approve": (principal, nat) -> (NatResponseDto);
    "setApprovalForAll": (principal, bool) -> (NatResponseDto);
    "transfer": (principal, nat) -> (NatResponseDto);
    "transferFrom": (principal, principal, nat) -> (NatResponseDto);
    "mint": (principal, nat, vec StringProperty) -> (NatResponseDto);
    "burn": (nat) -> (NatResponseDto);
}